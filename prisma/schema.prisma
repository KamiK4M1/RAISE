// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          String    @default("user")
  accounts      Account[]
  sessions      Session[]

  // Learning-related fields
  documents     Document[]
  flashcards    Flashcard[]
  quizAttempts  QuizAttempt[]
  chatHistory   ChatMessage[]
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Learning Platform Models
model Document {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  title       String
  filename    String
  content     String
  fileType    String
  fileSize    Int
  uploadPath  String?
  status      String   @default("processing") // processing, completed, failed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  flashcards  Flashcard[]
  quizzes     Quiz[]
  chatHistory ChatMessage[]
}

model Flashcard {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  documentId  String   @db.ObjectId
  question    String
  answer      String
  difficulty  String   @default("medium") // easy, medium, hard
  easeFactor  Float    @default(2.5)
  interval    Int      @default(1)
  nextReview  DateTime @default(now())
  reviewCount Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
}

model Quiz {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  documentId   String   @db.ObjectId
  title        String
  description  String?
  questions    Json     // Array of quiz questions
  totalPoints  Int
  timeLimit    Int?     // in minutes
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  document Document      @relation(fields: [documentId], references: [id], onDelete: Cascade)
  attempts QuizAttempt[]
}

model QuizAttempt {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  quizId      String   @db.ObjectId
  answers     Json     // Array of user answers
  score       Float
  totalPoints Int
  percentage  Float
  timeTaken   Int      // in seconds
  completedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model ChatMessage {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  documentId String   @db.ObjectId
  question   String
  answer     String
  sources    Json?    // Array of source chunks
  confidence Float?
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
}